name: React App Deployment

on:
  push:
    branches:
      - develop

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  SSH_PORT: 22

  CONTAINER_NAME: chanjoke
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/chanjoke:latest

  SSH_PASS: ${{ secrets.SSH_PRIVATE_KEY }}
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}

  REACT_APP_DASHBOARD_ID: ${{ secrets.REACT_APP_DASHBOARD_ID }}
  REACT_APP_SUPERSET_DOMAIN: ${{ secrets.REACT_APP_SUPERSET_DOMAIN }}

jobs:
  build_frontend_app:
    runs-on: ubuntu-latest
    env:
      EXAMPLE: example # environment variable

    steps:
      # checkout the repository content to github runner
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
  
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # build the react app
      - name: Build & push  Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/Dockerfile.prod
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.IMAGE_NAME }}
          build-args: |
            REACT_APP_DASHBOARD_ID=${{ env.REACT_APP_DASHBOARD_ID }}
            REACT_APP_SUPERSET_DOMAIN=${{ env.REACT_APP_SUPERSET_DOMAIN }}
      - name: Log out from Docker Hub
        run: docker logout

      - name: Setup SSH keys
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ env.SSH_PASS }}

      - name: Remote ssh to server and update the running container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          port: ${{ env.SSH_PORT }}
          key: ${{ env.SSH_PASS }}
          script_stop: true
          script: |
            if docker ps -a --format '{{.Names}}' | grep -q ${{ env.CONTAINER_NAME }}; then
              echo "Check 1"
              docker stop ${{ env.CONTAINER_NAME }} || true  # Stop the container (ignore errors if it doesn't exist)
              docker rm ${{ env.CONTAINER_NAME }} || true    # Remove the container (ignore errors if it doesn't exist)
            fi

            # Login to Docker Hub
            echo '${{ env.DOCKER_PASSWORD }}' | docker login -u ${{ env.DOCKER_USERNAME }} --password-stdin
            if [ $? -eq 0 ]; then
              echo "Docker login successful"
            else
              echo "Error: Docker login failed"
              exit 1
            fi

            docker pull --quiet ${{ env.IMAGE_NAME }}
            if [ $? -eq 0 ]; then
              echo "Docker image ${{ env.IMAGE_NAME }} pulled successfully"
            else
              echo "Error: Failed to pull Docker image ${{ env.IMAGE_NAME }}"
              exit 1
            fi

            # Run Docker commands with sudo and pass the password
            echo '${{ env.SUDO_PASSWORD }}' | sudo -S docker run -d --name ${{ env.CONTAINER_NAME }} -p 8099:3000 ${{ env.IMAGE_NAME }}
            sudo docker logout
            sleep 10
